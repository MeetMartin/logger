{"version":3,"sources":["webpack://logger/webpack/universalModuleDefinition","webpack://logger/webpack/bootstrap","webpack://logger/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://logger/./node_modules/@7urtle/lambda/src/conditional.js","webpack://logger/./node_modules/@7urtle/lambda/src/utils.js","webpack://logger/./node_modules/@7urtle/lambda/src/list.js","webpack://logger/./src/index.js","webpack://logger/./node_modules/@7urtle/lambda/src/string.js","webpack://logger/./node_modules/@7urtle/lambda/src/core.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","obj","configurable","writable","isEqual","a","b","isTrue","isTypeOf","typeOf","isString","isNull","isUndefined","isObject","isArray","Array","isFunction","isLength","lengthOf","length","passThrough","f","deepInspect","console","log","String","join","map","inspectArray","inspect","k","keysOf","inspectObject","inspectString","mapper","list","separator","keys","entries","defaultDecorator","level","input","Date","toLocaleString","toUpperCase","defaultConfiguration","levels","debug","info","warn","error","library","decorator","getLogger","configuration","fns","reduceRight","initial","reducer","v","compose","createLogger"],"mappings":"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","file":"logger.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"logger\"] = factory();\n\telse\n\t\troot[\"logger\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","import {typeOf, lengthOf} from \"./utils\";\n\n/**\n * isEqual :: a -> b -> boolean\n *\n * isEqual output is true if strict equality between a and b is true.\n * isEqual output is always false for comparison of objects and arrays.\n */\nexport const isEqual = a => b => a === b;\n\n/**\n * isNotEqual :: a -> b -> boolean\n *\n * isNotEqual output is true if strict equality between a and b is false.\n * isNotEqual output is always true for comparison of objects and arrays.\n */\nexport const isNotEqual = a => b => a !== b;\n\n/**\n * isTrue :: a -> boolean\n *\n * isTrue output is true if input is true.\n */\nexport const isTrue = isEqual(true);\n\n/**\n * isFalse :: a -> Boolean\n *\n * isFalse output is true if input is false.\n */\nexport const isFalse = isEqual(false);\n\n/**\n * isGreaterThan :: a -> b -> boolean\n *\n * isGreaterThan output is true if b is greater than a.\n */\nexport const isGreaterThan = a => b => b > a;\n\n/**\n * isLessThan :: a -> b -> boolean\n *\n * isLessThan output is true if b is less than a.\n */\nexport const isLessThan = a => b => b < a;\n\n/**\n * isAtLeast :: a -> b -> boolean\n *\n * isAtLeast output is true if b is greater or equal to a.\n */\nexport const isAtLeast = a => b => b >= a;\n\n/**\n * isAtMost :: a -> b -> boolean\n *\n * isAtMost output is true if b is less or equal to a.\n */\nexport const isAtMost = a => b => b <= a;\n\n/**\n * isTypeOf :: a -> b -> boolean\n *\n * isTypeOf output is true if b is a type of a.\n */\nexport const isTypeOf = a => b => isEqual(typeOf(b))(a);\n\n/**\n * isString :: a -> boolean\n *\n * isString output is true if b is a string.\n */\nexport const isString = isTypeOf('string');\n\n/**\n * isBoolean :: a -> boolean\n *\n * isBoolean output is true if b is a boolean.\n */\nexport const isBoolean = isTypeOf('boolean');\n\n/**\n * isNull :: a -> boolean\n *\n * isNull output is true if b is a null.\n */\nexport const isNull = isEqual(null);\n\n/**\n * isUndefined :: a -> boolean\n *\n * isUndefined output is true if b is an undefined.\n */\nexport const isUndefined = isTypeOf('undefined');\n\n/**\n * isNumber :: a -> boolean\n *\n * isNumber output is true if b is a number.\n */\nexport const isNumber = isTypeOf('number');\n\n/**\n * isObject :: a -> boolean\n *\n * isObject output is true if b is an object, array of null.\n */\nexport const isObject = isTypeOf('object');\n\n/**\n * isArray :: a -> boolean\n *\n * isArray output is true if b is an array.\n */\nexport const isArray = Array.isArray;\n\n/**\n * isFunction :: a -> boolean\n *\n * isFunction output is true if b is a function.\n */\nexport const isFunction = isTypeOf('function');\n\n/**\n * isLength :: (string|array) -> b -> boolean\n *\n * isLength output is true if b is a length of a.\n */\nexport const isLength = a => b => isEqual(lengthOf(b))(a);\n\n/**\n * isNotLength :: (string|array) -> b -> boolean\n *\n * isNotLength output is true if b is not a length of a.\n */\nexport const isNotLength = a => b => !isLength(a)(b);\n\n/**\n * isEmpty :: (string|array) -> boolean\n *\n * isEmpty output is true if input has a length of 0.\n * isEmpty output is always false if input is an object and not an array or a string.\n */\nexport const isEmpty = isLength(0);\n\n/**\n * isNotEmpty :: (string|array) -> boolean\n *\n * isNotEmpty output is true if input does not have a length of 0.\n * isNotEmpty output is always true if input is an object and not an array or a string.\n */\nexport const isNotEmpty = isNotLength(0);\n\n/**\n * isZero :: a -> boolean\n *\n * isZero output is true if a is 0.\n */\nexport const isZero = isEqual(0);\n\n/**\n * isNotZero :: a -> boolean\n *\n * isNotZero output is true if a is not 0.\n */\nexport const isNotZero = isNotEqual(0);\n\n/**\n * isNothing :: a -> boolean\n *\n * isNothing returns true if input is null, undefined or empty string or empty array.\n */\nexport const isNothing = a => isNull(a) || isUndefined(a) || isEmpty(a);\n\n/**\n * isJust :: a -> boolean\n *\n * isJust returns true if input is not null, undefined or empty string or empty array.\n */\nexport const isJust = a => !isNothing(a);","import {isArray, isEqual, isString, isObject, isFunction, isNull, isUndefined} from \"./conditional\";\nimport {keysOf, join, map} from \"./list\";\n\n/**\n * typeOf :: a -> string\n *\n * typeOf outputs type of its input a.\n */\nexport const typeOf = a => typeof a;\n\n/**\n * lengthOf :: (string|array) -> number\n */\nexport const lengthOf = a => a.length;\n\n/**\n * passThrough :: function -> a -> a\n *\n * passThrough output is the same as input a.\n * passThrough executes function passed as first argument.\n */\nexport const passThrough = f => a => {\n  f(a);\n  return a;\n};\n\n/**\n * log :: a -> a\n *\n * log output is the same as input.\n * log causes side effect of console.log.\n */\nexport const log = passThrough(console.log);\n\n/**\n * spy :: a -> a\n *\n * spy output is the same as input.\n * spy causes side effect of console.log.\n */\nexport const spy = passThrough(a => console.log(deepInspect(a)));\n\n/**\n * minusOneToUndefined :: a -> a|boolean\n *\n * minusOneToUndefined output is the same as input or undefined if input is -1.\n */\nexport const minusOneToUndefined = a => isEqual(-1)(a) ? undefined: a;\n\n/**\n * inspectFunction :: (a -> b) -> string\n *\n * inspectFunction outputs name of named function or its conversion to string.\n */\nexport const inspectFunction = f => f.name ? f.name : String(f);\n\n/**\n * inspectArray :: [a] -> string\n *\n * inspectArray maps over input array [a] and outputs string representing it.\n */\nexport const inspectArray = a => `[${join(', ')(map(deepInspect)(a))}]`;\n\n/**\n * inspectString :: a -> string\n *\n * inspectString outputs string representing input.\n */\nexport const inspectString = a => `'${a}'`;\n\n/**\n * inspectObject :: a -> string\n *\n * inspectObject outputs string representing input.\n */\nexport const inspectObject = a =>\n  isFunction(a.inspect)\n    ? a.inspect()\n    : `{${join(', ')(map(join(': '))(map(k => [k, deepInspect(a[k])])(keysOf(a))))}}`\n\n/**\n * deepInspect :: a -> string\n *\n * deepInspect runs recursively over input and outputs string representing the input.\n */\nexport const deepInspect = a =>\n  isUndefined(a)\n    ? 'undefined'\n    : isNull(a)\n      ? 'null'\n      : isFunction(a)\n        ? inspectFunction(a)\n        : isArray(a)\n          ? inspectArray(a)\n          : isObject(a)\n            ? inspectObject(a)\n            : isString(a)\n              ? inspectString(a)\n              : String(a);","import {minusOneToUndefined} from './utils';\n\n/**\n * reduce :: a -> ((a, b) -> a) -> [b] -> a\n *\n * reduce executes input reducer function that over each member of input array [b] to output single value a.\n *\n * reduce executes functions in reverse order to reduceRight.\n */\nexport const reduce = initial => reducer => list => list.reduce(reducer, initial);\n\n/**\n * reduceRight :: a -> ((a, b) -> a) -> [b] -> a\n *\n * reduceRight executes input reducer function that over each member of input array [b] to output single value a.\n *\n * reduceRight executes functions in reverse order to reduce.\n */\nexport const reduceRight = initial => reducer => list => list.reduceRight(reducer, initial);\n\n/**\n * map :: (a -> b) -> [a] -> [b]\n *\n * map executes input mapper over each member of input array [a] to output new array [b].\n */\nexport const map = mapper => list => list.map(mapper);\n\n/**\n * filter :: (a -> boolean) -> [a] -> [b]\n *\n * filter executes input checker over each member of input array [a] to filter and output filtered new array [b].\n */\nexport const filter = checker => list => list.filter(checker);\n\n/**\n * find :: (a -> boolean) -> [a] -> [b]\n *\n * find executes input checker over each member of input array [a] and outputs the first array member that matches checker or undefined.\n */\nexport const find = checker => list => list.find(checker);\n\n/**\n * findIndex :: (a -> boolean) -> [a] -> [b]\n *\n * findIndex executes input checker over each member of input array [a] and outputs the index of first array member that matches checker or undefined.\n */\nexport const findIndex = checker => list => minusOneToUndefined(list.findIndex(checker));\n\n/**\n * join :: string -> [a] -> string\n *\n * join outputs a string created by joining input array members with input separator.\n */\nexport const join = separator => list => list.join(separator);\n\n/**\n * keysOf :: object -> [string]\n *\n * keysOf outputs array of string keys of input array or object.\n */\nexport const keysOf = Object.keys;\n\n/**\n * entriesOf :: object -> [[string, a]]\n *\n * entriesOf outputs array of arrays of string keys and raw values of input array or object.\n */\nexport const entriesOf = Object.entries;\n\n/**\n * everyOf :: (a -> boolean) -> [a] -> boolean\n *\n * everyOf outputs true if every element of input array passes input checker function as true.\n */\nexport const everyOf = checker => list => list.every(checker);\n\n/**\n * slice :: number -> number -> [a] -> [a]\n *\n * slice outputs selected array elements as an array based on input range.\n */\nexport const slice = end => start => list => list.slice(start, end);\n\n/**\n * some :: (a -> boolean) -> [a] -> boolean\n *\n * some outputs true if any element of input array passes input checker function as true.\n */\nexport const someOf = checker => list => list.some(checker);","import {isTrue, passThrough, compose, upperCaseOf} from \"@7urtle/lambda\";\n\nconst createLogger = configuration => getLogger({\n  ...defaultConfiguration,\n  ...configuration\n});\n\nconst defaultDecorator = level => input =>\n  new Date().toLocaleString() + '; ' + upperCaseOf(level) + ': ' + input;\n\nconst defaultConfiguration = {\n  levels: {\n    log: true,\n    debug: true,\n    info: true,\n    warn: true,\n    error: true\n  },\n  library: console,\n  decorator: defaultDecorator\n};\n\nconst getLogger = configuration => ({\n  log: log(configuration)('log'),\n  debug: log(configuration)('debug'),\n  info: log(configuration)('info'),\n  warn: log(configuration)('warn'),\n  error: log(configuration)('error')\n});\n\nconst log = configuration => level =>\n  isTrue(configuration.levels[level])\n    ? passThrough(compose(configuration.library[level], configuration.decorator(level)))\n    : () => null;\n\nexport default createLogger;\n\nexport {\n  defaultDecorator,\n  getLogger,\n  log\n};","import {minusOneToUndefined} from './utils';\n\n/**\n * trim :: string -> string\n *\n * trim output is a string without white characters around it.\n */\nexport const trim = string => string.trim();\n\n/**\n * testRegEx :: regex -> string -> boolean\n *\n * testRegEx outputs true if string b passes regular expression a.\n */\nexport const testRegEx = regex => string => regex.test(string);\n\n/**\n * substr :: number -> number -> string -> string\n * \n * substr outputs substring based on provided string, start and limit.\n */\nexport const substr = limit => start => string => string.substr(start, limit);\n\n/**\n * startsWith :: string -> string -> boolean\n * \n * startsWith outputs true if an input string starts with provided string.\n */\nexport const startsWith = substring => string => string.startsWith(substring);\n\n/**\n * endsWith :: string -> string -> boolean\n * \n * endsWith outputs true if an input string ends with provided string.\n */\nexport const endsWith = substring => string => string.endsWith(substring);\n\n/**\n * repeat :: number -> string -> string\n * \n * repeat outputs new string repeating input string inputed count of times.\n */\nexport const repeat = count => string => string.repeat(count);\n\n/**\n * replace :: string -> string -> string -> string\n * \n * replace outputs new string replacing input substring with input replacement string in input string.\n */\nexport const replace = replacement => substring => string => string.replace(substring, replacement);\n\n/**\n * search :: string/regex -> string -> number\n * \n * search outputs position of input substring or regular expression withing input string or undefined if it is not found.\n */\nexport const search = substring => string => minusOneToUndefined(string.search(substring));\n\n/**\n * split :: string -> string -> array\n * \n * split outputs and array of an input string split by the input substring.\n */\nexport const split = substring => string => string.split(substring);\n\n/**\n * lowerCaseOf :: string -> string\n * \n * lowerCaseOf ouputs the lower case version of input string.\n */\nexport const lowerCaseOf = string => string.toLowerCase();\n\n/**\n * upperCaseOf :: string -> string\n * \n * upperCaseOf ouputs the upper case version of input string.\n */\nexport const upperCaseOf = string => string.toUpperCase();","import {reduce, reduceRight} from './list';\nimport {isString, isArray, isObject} from './conditional';\nimport {minusOneToUndefined, passThrough} from './utils';\n\n/**\n * identity simply passes its input to its output.\n *\n * @HindleyMilner identity :: a -> a\n *\n * @pure\n * @param {*} a\n * @return {a}\n *\n * @example\n * identity('anything');\n * // => anything\n */\nexport const identity = a => a;\n\n/**\n * pipe output is a right-to-left function composition\n * where each function receives input and hands over its output to the next function.\n *\n * compose executes functions in reverse order to pipe.\n *\n * compose(f,g)(x) is equivalent to f(g(x)).\n *\n * @HindleyMilner compose :: [(a -> b)] -> a -> (a -> b)\n *\n * @pure\n * @param {function} fns\n * @param {*} a\n * @return {*}\n *\n * @example\n * const addA = a => a + 'A';\n * const addB = a => a + 'B';\n * const addAB = compose(addB, addA);\n *\n * addAB('Order: ');\n * // => Order: AB\n */\nexport const compose = (...fns) => a => reduceRight(a)((v, f) => f(v))(fns);\n\n/**\n * pipe :: [(a -> b)] -> a -> (a -> b)\n *\n * pipe output is a left-to-right function composition\n * where each function receives input and hands over its output to the next function.\n *\n * pipe executes functions in reverse order to compose.\n *\n * pipe(f,g)(x) is equivalent to g(f(x)).\n */\nexport const pipe = (...fns) => a => reduce(a)((v, f) => f(v))(fns);\n\n/**\n * functorMap :: (a -> b) -> Functor -> Functor\n *\n * functorMap maps function over inputted functor outputting resulting functor.\n */\nexport const functorMap = fn => functor => functor.map(fn);\n\n/**\n * functorFlatMap :: (a -> Functor) -> Functor -> Functor\n *\n * functorFlatMap flatMaps function outputting functor over inputted functor outputting resulting functor.\n */\nexport const functorFlatMap = fn => functor => functor.flatMap(fn);\n\n/**\n * liftA2 (a -> b -> c) -> Applicative a -> Applicative b -> Applicative c\n *\n * liftA2 provides point-free way of writing calls over applicative functors and functions with arity 2.\n */\nexport const liftA2 = fn => ap1 => ap2 => ap1.map(fn).ap(ap2);\n\n/**\n * liftA3 (a -> b -> c -> d) -> Applicative a -> Applicative b -> Applicative c -> Applicative d\n *\n * liftA3 provides point-free way of writing calls over applicative functors and functions with arity 3.\n */\nexport const liftA3 = fn => ap1 => ap2 => ap3 => ap1.map(fn).ap(ap2).ap(ap3);\n\n/**\n * concat :: a -> a|boolean\n * \n * contact outputs concatenated inputs of strings, arrays and objects or outputs undefined for other types.\n */\nexport const concat = a => b =>\n  isString(b) || isArray(b)\n    ? b.concat(a)\n    : isObject(b)\n      ? {...b, ...a}\n      : undefined;\n\n/**\n * includes :: a -> b -> boolean\n *\n * includes output is true if b includes a.\n */\nexport const includes = a => b => b.includes(a);\n\n/**\n * indexOf :: a -> b -> number\n * \n * indexOf outputs position of input a within input b or undefined if it is not found.\n */\nexport const indexOf = a => b => minusOneToUndefined(b.indexOf(a));\n\n/**\n * lastIndexOf :: a -> b -> number\n * \n * lastIndexOf outputs position of input a withing input b looking from the end or it retuns undefined if it is not found.\n */\nexport const lastIndexOf = a => b => minusOneToUndefined(b.lastIndexOf(a));\n\n/**\n * memoize :: object -> (a -> b) -> a -> b\n *\n * memoize uses input memory to save output of input function and then uses it to lookup result on a repeated run\n */\nexport const memoize = memory => fn => a =>\n  a in memory ? memory[a] : (passThrough(b => memory[a] = b))(fn(a));"],"sourceRoot":""}